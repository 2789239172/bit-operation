// 按位操作符（Bitwise operators）
/**
 *  按位操作符操作数字的二进制形式，但是返回值依然是标准的JavaScript数值。
 *  操作数被转换成32位整数, 超过32位的数字会被丢弃。
 *  与其他类型进行运算会先将其转为数字, 无法转换为数值就转换为0
 *  小数位会被舍弃, 所以可以实现向下取整。
 *  32位有符号数字所能表示的最小和最大整数是 -2147483648 和 2147483647。
 * 
 *  因为32位太长以下以8位为例
 * * */

/**
 * 按位与 &
 *  对每一对比特位进行 与(&&) 操作
 *  将任一数值 x 与 0 执行按位与操作，其结果都为 0。
 *  将任一数值 x 与 -1 执行按位与操作，其结果都为 x。
 * 
 * 9:  00001001 | 4: 00000100 | 4: 00000100
 * 14:00001110 | 0: 00000000 | -1:11111111
 * -----------------------------------------------------
 * 8:  00001000 | 0: 00000000 | 4: 00000100
 * * */
console.log(9 & 14) //8
console.log(4 & 0) // 0
console.log(4 & -1) //4


/*
按位或 |
    对每一对比特位进行 或(||) 操作
    将任一数值 x 与 0 进行按位或操作，其结果都是 x。
    将任一数值 x 与 -1 进行按位或操作，其结果都为 -1。

    9: 00001001 | 4:00000100 |  4:00000100
  14: 00001110 | 0:00000000 | -1:11111111
---------------------------------------------------------------------------------------------------------------------------------+
  15: 00001111 | 4:00000100 | -1:11111111
** */
// console.log(9 | 14) //15
// console.log(4 | 0) //4
// console.log(4 | -1) //-1

// console.log(4 | NaN) // 4
// console.log(4 | false) // 4
// console.log('鼎折覆餗' | -1) // -1
// console.log([] | 2)

/**
异或(XOR):
    当两个布尔值不同时为true, 相同时则为false

按位异或 ^
    对每一对比特位进行 异或 操作
    将任一数值 x 与 0 进行异或操作，其结果为 x。
    将任一数值 x 与 -1 进行异或操作，其结果为 ~x。
    任一数值 x 与 任一数值 y 异或两次其值不变 (可以用于变量交换)
    两个相同数值进行异或操作, 结果为 0

    9: 00001001 | 4:00000100 |  4:00000100            | 4:00000100
  14: 00001110 | 0:00000000 | -1:11111111            | 3:00000011
---------------------------------------------------------------------------------------------------------------------------------+
    7: 00000111 | 4:00000100 |     11111011 (补码)   |    00000111
                                            | -5:10000101 (原码)   | 3:00000011
---------------------------------------------------------------------------------------------------------------------------------+
                                                                              | 4:00000100
 * * */

// console.log(14 ^ 9) // 7
// console.log(4 ^ 0) // 4
// console.log(4 ^ -1) // -5
// console.log(4 ^ 3 ^ 3) // 4
// console.log(8 ^ 8) // 0

// let a = 4
// let b = 3
// a = a ^ b 
// b = a ^ b // b = a ^ b ^ b = 4
// a = a ^ b // a = a ^ a ^ b = 3
// console.log(a, b)

/**
 按位非 ~   
    对每一对比特位进行 非(!) 操作
    对任一数值 x 进行按位非操作的结果为 -(x + 1)。
        例如，~5 结果为 -6。

                        |      00001001 (原码)
                        |      11110110 (反码)
   9: 00001001  | -9: 11110111 (补码)
+---------------------------------------------------------------------------------------------------------------------------------+
       11110110  | 10: 00001000
       11110101  |
-10: 1001010    |

* ** */
// console.log(~9) // -10
// console.log(~-9) // 8