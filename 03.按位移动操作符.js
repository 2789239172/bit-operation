/**
 * 左移操作符 <<
 * 将第一个操作数向左移动指定的位数。向左被移出的位被丢弃，右侧用 0 补充
 * 在数字 x 上左移 y 比特得到 x * 2 ^ y
 * 
 *   8: 00001000 |  -8: 11111000 |   6: 00000110
 * ------------------------------------------------------------------
 * 32: 00100000 | -32: 11100000 | 12: 00001100
 *                       |        11011111 |
 *                       |        10100000 |
 * 
 * 6 = 2 ^ 2 + 2 ^ 1 = (2 ^ 1 + 2 ^ 0) * 2 
 * 12 = 2 ^ 3 + 2 ^ 2 =  (2 ^ 1 + 2 ^ 0) * 2 ^ 2 = 6 * 2
 * * */

// console.log(8 << 2, 8 * 2 ** 2)  // 32
// console.log(-8 << 2, -8 * 2 ** 2 ) // 32
// console.log(6 << 1, 6 * 2 ) //12
console.log(998.8 << 0) //998, 取整

/**
 * 有符号右移 >>
 *   将第一个操作数向右移动指定的位数。向右被移出的位被丢弃
 *   拷贝符号位的值填充左侧
 * 
 *  9: 00001001 | -9: 11110111
 * -----------------------------------------------------------
 *  2: 00000010 | -3: 11111101
 *                      |      11111100
 *                      |      00000011
 * * */

//  console.log(9 >> 2) // 2
//  console.log(-9 >> 2) // -3

/**
 * 无符号右移 >>>
 * 与有符号一致, 但左侧会使用0填充, 因为符号位变成了 0，所以结果总是非负的。
 * （译注：即便右移 0 个比特，结果也是非负的。）
 * 
 * 4:00000100 |                -4:11111100 |                -4: 11111100
 * -------------------------------------------------------------------------------------------------------------
 * 2:00000010 | 2147483646:01111110 | 4294967292: 11111100
 *                                     (此处省略24个1)                (此处省略24个1)
 * * */

console.log(4 >>> 1) // 2
console.log(-4 >>> 1) // 2147483646

console.log(4 >>> 0) // 4
console.log(-4 >>> 0) // 4294967292 
// 这里超出了32位所能表达的最大数值, 无符号右移 符号被舍弃了, 最大能表示的是4294967295

console.log(parseInt(new Array(32).fill(1).join(''), 2)) // 4294967295